name: PS Test

on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  test:
    name: Test with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [proving, db, other]
      fail-fast: false
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        key: ${{ matrix.test-group }}
    
    - name: Install grcov
      if: matrix.test-group == 'proving'
      run: cargo install grcov
      
    - name: Start PostgreSQL
      if: matrix.test-group == 'db' || matrix.test-group == 'proving'
      run: docker compose -f proving-service/docker/docker-compose.test.yml up -d postgres
    
    - name: Wait for PostgreSQL to be ready
      if: matrix.test-group == 'db' || matrix.test-group == 'proving'
      run: |
        for i in {1..30}; do
          if docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres; then
            break
          fi
          sleep 1
        done
        
    - name: Initialize database
      if: matrix.test-group == 'db' || matrix.test-group == 'proving'
      run: |
        if [ -f proving-service/tests/init.sql ]; then
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -f proving-service/tests/init.sql
        fi
    
    - name: Run proving tests
      if: matrix.test-group == 'proving'
      run: |
        cd proving-service
        mkdir -p .coverage
        CARGO_INCREMENTAL=0 \
        RUSTFLAGS="-C instrument-coverage -C codegen-units=1" \
        LLVM_PROFILE_FILE=".coverage/fossil-%p-%m.profraw" \
        cargo test --package message-handler
      
    - name: Run database tests
      if: matrix.test-group == 'db'
      run: |
        cd proving-service
        cargo test --package db
        
    - name: Run other tests
      if: matrix.test-group == 'other'
      run: |
        cd proving-service
        cargo test --workspace --exclude message-handler --exclude db
      
    - name: Generate coverage report
      if: matrix.test-group == 'proving'
      run: |
        cd proving-service
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o .coverage/lcov.info
        
    - name: Generate coverage badge
      if: matrix.test-group == 'proving'
      run: |
        cd proving-service
        # Extract coverage percentage from lcov info
        COVERAGE_PCT=$(grep -m 1 "LF:" .coverage/lcov.info | awk '{print $2}')
        COVERAGE_HIT=$(grep -m 1 "LH:" .coverage/lcov.info | awk '{print $2}')
        
        if [ -n "$COVERAGE_PCT" ] && [ -n "$COVERAGE_HIT" ] && [ "$COVERAGE_PCT" -gt 0 ]; then
          COVERAGE=$(awk "BEGIN { printf \"%.1f\", ($COVERAGE_HIT / $COVERAGE_PCT) * 100 }")
          echo "Coverage percentage: $COVERAGE%"
          
          # Determine badge color based on coverage
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$COVERAGE < 70" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE < 90" | bc -l) )); then
            COLOR="green"
          else
            COLOR="brightgreen"
          fi
          
          # Save badge URL to a file for documentation
          echo "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR" > .coverage/badge_url.txt
          echo "Coverage badge URL saved to .coverage/badge_url.txt"
        else
          echo "Could not determine coverage percentage"
        fi

    - name: Stop PostgreSQL
      if: always() && (matrix.test-group == 'db' || matrix.test-group == 'proving')
      run: docker compose -f proving-service/docker/docker-compose.test.yml down 