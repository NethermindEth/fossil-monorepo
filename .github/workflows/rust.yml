name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy, llvm-tools-preview
    
    - name: Verify LLVM tools
      run: |
        rustup component add llvm-tools-preview
        echo "LLVM_PROFILE_DIR=$GITHUB_WORKSPACE/target/profiles" >> $GITHUB_ENV

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Setup codespell
      run: pip install codespell
    
    - name: Install grcov
      run: cargo install grcov
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run codespell
      run: codespell
    
    - name: Clippy
      run: |
        cargo +nightly clippy \
        --no-deps \
        -p db \
        -p message-handler \
        -p proving-service \
        -- \
        -W clippy::branches_sharing_code \
        -W clippy::clear_with_drain \
        -W clippy::derive_partial_eq_without_eq \
        -W clippy::empty_line_after_outer_attr \
        -W clippy::equatable_if_let \
        -W clippy::imprecise_flops \
        -W clippy::iter_on_empty_collections \
        -W clippy::iter_with_drain \
        -W clippy::large_stack_frames \
        -W clippy::manual_clamp \
        -W clippy::mutex_integer \
        -W clippy::needless_pass_by_ref_mut \
        -W clippy::nonstandard_macro_braces \
        -W clippy::or_fun_call \
        -W clippy::path_buf_push_overwrite \
        -W clippy::read_zero_byte_vec \
        -W clippy::redundant_clone \
        -W clippy::suboptimal_flops \
        -W clippy::suspicious_operation_groupings \
        -W clippy::trailing_empty_array \
        -W clippy::trait_duplication_in_bounds \
        -W clippy::transmute_undefined_repr \
        -W clippy::trivial_regex \
        -W clippy::tuple_array_conversions \
        -W clippy::uninhabited_references \
        -W clippy::unused_peekable \
        -W clippy::unused_rounding \
        -W clippy::useless_let_if_seq \
        -W clippy::use_self \
        -W clippy::missing_const_for_fn \
        -W clippy::empty_line_after_doc_comments \
        -W clippy::iter_on_single_items \
        -W clippy::match_same_arms \
        -W clippy::doc_markdown \
        -W clippy::unnecessary_struct_initialization \
        -W clippy::string_lit_as_bytes \
        -W clippy::explicit_into_iter_loop \
        -W clippy::explicit_iter_loop \
        -W clippy::manual_string_new \
        -W clippy::naive_bytecount \
        -W clippy::needless_bitwise_bool \
        -W clippy::zero_sized_map_values \
        -W clippy::single_char_pattern \
        -W clippy::needless_continue \
        -W clippy::single_match \
        -W clippy::single_match_else \
        -W clippy::needless_match \
        -W clippy::needless_late_init \
        -W clippy::redundant_pattern_matching \
        -W clippy::redundant_pattern \
        -W clippy::redundant_guards \
        -W clippy::collapsible_match \
        -W clippy::match_single_binding \
        -W clippy::match_ref_pats \
        -W clippy::match_bool \
        -D clippy::needless_bool \
        -W clippy::unwrap_used \
        -W clippy::expect_used
    
    - name: Build
      run: cargo build --verbose

    - name: Start PostgreSQL
      run: docker compose -f docker-compose.test.yml up -d postgres
    
    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..30}; do
          if docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres; then
            break
          fi
          sleep 1
        done
    
    - name: Run tests with coverage
      run: |
        rustup component add llvm-tools-preview
        mkdir -p .coverage
        CARGO_INCREMENTAL=0 \
        RUSTFLAGS="-C instrument-coverage -C codegen-units=1" \
        LLVM_PROFILE_FILE=".coverage/fossil-%p-%m.profraw" \
        cargo test --workspace --all-features
      
    - name: Generate coverage report
      run: |
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o .coverage/lcov.info
        
    # Generate badge from coverage data
    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from lcov info
        COVERAGE_PCT=$(grep -m 1 "LF:" .coverage/lcov.info | awk '{print $2}')
        COVERAGE_HIT=$(grep -m 1 "LH:" .coverage/lcov.info | awk '{print $2}')
        
        if [ -n "$COVERAGE_PCT" ] && [ -n "$COVERAGE_HIT" ] && [ "$COVERAGE_PCT" -gt 0 ]; then
          COVERAGE=$(awk "BEGIN { printf \"%.1f\", ($COVERAGE_HIT / $COVERAGE_PCT) * 100 }")
          echo "Coverage percentage: $COVERAGE%"
          
          # Determine badge color based on coverage
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$COVERAGE < 70" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE < 90" | bc -l) )); then
            COLOR="green"
          else
            COLOR="brightgreen"
          fi
          
          # Save badge URL to a file for documentation
          echo "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR" > .coverage/badge_url.txt
          echo "Coverage badge URL saved to .coverage/badge_url.txt"
        else
          echo "Could not determine coverage percentage"
        fi

    - name: Stop PostgreSQL
      if: always()
      run: docker compose -f docker-compose.test.yml down
