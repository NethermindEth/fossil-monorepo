name: Monorepo CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Master job that depends on all others
  complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [ps-build, ps-test, ps-lint, op-build, op-test, op-lint, update-badges]
    steps:
      - name: CI Passed
        run: echo "All CI checks have passed!"
        
  # Proving Service jobs
  ps-build:
    name: PS Build
    uses: ./.github/workflows/ps-build.yml

  ps-test:
    name: PS Test
    uses: ./.github/workflows/shared-test.yml
    with:
      component: 'ps'
    needs: [ps-build]

  ps-lint:
    name: PS Lint
    uses: ./.github/workflows/ps-lint.yml
        
  # Offchain Processor jobs
  op-build:
    name: OP Build
    uses: ./.github/workflows/op-build.yml

  op-test:
    name: OP Test
    uses: ./.github/workflows/shared-test.yml
    with:
      component: 'op'
    needs: [op-build]

  op-lint:
    name: OP Lint
    uses: ./.github/workflows/op-lint.yml 

  # Coverage badge update job
  update-badges:
    name: Update Coverage Badges
    runs-on: ubuntu-latest
    needs: [ps-test, op-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      # Download coverage artifacts
      - name: Download PS coverage
        uses: actions/download-artifact@v4
        with:
          name: ps-coverage
          path: .coverage-ps
          
      - name: Download OP coverage
        uses: actions/download-artifact@v4
        with:
          name: op-coverage
          path: .coverage-op
      
      # Update README badges
      - name: Update README badges
        run: |
          # Show what artifacts we have
          echo "Listing downloaded artifact contents:"
          find .coverage-ps -type f | sort
          find .coverage-op -type f | sort
          
          # Look for lcov files
          PS_LCOV=""
          OP_LCOV=""
          
          for file in $(find .coverage-ps -type f -name "*.info" -o -name "*lcov*"); do
            echo "Found PS lcov file: $file"
            PS_LCOV="$file"
            break
          done
          
          for file in $(find .coverage-op -type f -name "*.info" -o -name "*lcov*"); do
            echo "Found OP lcov file: $file"
            OP_LCOV="$file"
            break
          done
          
          # Run our badge update script
          chmod +x .github/scripts/update-badges.sh
          
          if [ -n "$PS_LCOV" ] && [ -n "$OP_LCOV" ]; then
            echo "Updating badges from lcov files"
            .github/scripts/update-badges.sh --ps-lcov "$PS_LCOV" --op-lcov "$OP_LCOV"
          else
            echo "Falling back to extracting coverage from badge files"
            
            # Try to find badge files
            for file in $(find .coverage-ps -type f -name "*badge*"); do
              PS_COVERAGE=$(cat "$file" | grep -o "coverage-[0-9.]*" | cut -d'-' -f2 || echo "")
              if [ -n "$PS_COVERAGE" ]; then
                break
              fi
            done
            
            for file in $(find .coverage-op -type f -name "*badge*"); do
              OP_COVERAGE=$(cat "$file" | grep -o "coverage-[0-9.]*" | cut -d'-' -f2 || echo "")
              if [ -n "$OP_COVERAGE" ]; then
                break
              fi
            done
            
            # Update badges with extracted values
            if [ -n "$PS_COVERAGE" ] || [ -n "$OP_COVERAGE" ]; then
              ARGS=""
              [ -n "$PS_COVERAGE" ] && ARGS="$ARGS --ps-coverage $PS_COVERAGE"
              [ -n "$OP_COVERAGE" ] && ARGS="$ARGS --op-coverage $OP_COVERAGE"
              
              echo "Updating badges with: $ARGS"
              .github/scripts/update-badges.sh $ARGS
            else
              echo "Could not determine coverage percentages from artifacts"
            fi
          fi
      
      # Commit and push changes if badges were updated
      - name: Commit and push badge updates
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add README.md proving-service/README.md offchain-processor/README.md
          git commit -m "Update coverage badges [skip ci]"
          git push 