name: Monorepo CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Master job that depends on all others
  complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [ps-build, ps-test, ps-lint, op-build, op-test, op-lint, update-badges]
    steps:
      - name: CI Passed
        run: echo "All CI checks have passed!"
        
  # Proving Service jobs
  ps-build:
    name: PS Build
    uses: ./.github/workflows/ps-build.yml

  ps-test:
    name: PS Test
    uses: ./.github/workflows/shared-test.yml
    with:
      component: 'ps'
    needs: [ps-build]

  ps-lint:
    name: PS Lint
    uses: ./.github/workflows/ps-lint.yml
        
  # Offchain Processor jobs
  op-build:
    name: OP Build
    uses: ./.github/workflows/op-build.yml

  op-test:
    name: OP Test
    uses: ./.github/workflows/shared-test.yml
    with:
      component: 'op'
    needs: [op-build]

  op-lint:
    name: OP Lint
    uses: ./.github/workflows/op-lint.yml 

  # Coverage badge update job
  update-badges:
    name: Update Coverage Badges
    runs-on: ubuntu-latest
    needs: [ps-test, op-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      # Download coverage artifacts
      - name: Download PS coverage
        uses: actions/download-artifact@v4
        with:
          name: ps-coverage
          path: .coverage-ps
          
      - name: Download OP coverage
        uses: actions/download-artifact@v4
        with:
          name: op-coverage
          path: .coverage-op
      
      # Update README badges
      - name: Update README badges
        run: |
          # Show what artifacts we have
          echo "Listing downloaded artifact contents:"
          find .coverage-ps -type f | sort
          find .coverage-op -type f | sort
          
          # Function to update badge in README
          update_badge() {
            local component=$1
            local readme_path=$2
            local coverage=""
            local color=""
            
            if [ "$component" == "ps" ]; then
              # Try to extract coverage percentage from any available file
              for file in $(find .coverage-ps -type f -name "*.info" -o -name "*lcov*"); do
                echo "Found PS coverage file: $file"
                coverage_pct=$(grep -m 1 "LF:" "$file" | awk '{print $2}') || continue
                coverage_hit=$(grep -m 1 "LH:" "$file" | awk '{print $2}') || continue
                
                if [ -n "$coverage_pct" ] && [ -n "$coverage_hit" ] && [ "$coverage_pct" -gt 0 ]; then
                  coverage=$(awk "BEGIN { printf \"%.1f\", ($coverage_hit / $coverage_pct) * 100 }")
                  echo "Calculated PS coverage: $coverage%"
                  break
                fi
              done
            else
              # Try to extract coverage percentage from any available file
              for file in $(find .coverage-op -type f -name "*.info" -o -name "*lcov*"); do
                echo "Found OP coverage file: $file"
                coverage_pct=$(grep -m 1 "LF:" "$file" | awk '{print $2}') || continue
                coverage_hit=$(grep -m 1 "LH:" "$file" | awk '{print $2}') || continue
                
                if [ -n "$coverage_pct" ] && [ -n "$coverage_hit" ] && [ "$coverage_pct" -gt 0 ]; then
                  coverage=$(awk "BEGIN { printf \"%.1f\", ($coverage_hit / $coverage_pct) * 100 }")
                  echo "Calculated OP coverage: $coverage%"
                  break
                fi
              done
            fi
            
            # If we couldn't extract coverage, try looking for badge files
            if [ -z "$coverage" ]; then
              echo "Could not calculate coverage from lcov files, looking for badge files..."
              
              # Find and try to extract from badge files
              if [ "$component" == "ps" ]; then
                for file in $(find .coverage-ps -type f -name "*badge*"); do
                  badge_url=$(cat "$file")
                  # Extract coverage from badge URL
                  coverage=$(echo "$badge_url" | grep -o "coverage-[0-9.]*" | cut -d'-' -f2)
                  if [ -n "$coverage" ]; then
                    echo "Found PS coverage in badge file: $coverage%"
                    break
                  fi
                done
              else
                for file in $(find .coverage-op -type f -name "*badge*"); do
                  badge_url=$(cat "$file")
                  # Extract coverage from badge URL
                  coverage=$(echo "$badge_url" | grep -o "coverage-[0-9.]*" | cut -d'-' -f2)
                  if [ -n "$coverage" ]; then
                    echo "Found OP coverage in badge file: $coverage%"
                    break
                  fi
                done
              fi
            fi
            
            # If we still don't have coverage, use a default value
            if [ -z "$coverage" ]; then
              echo "Could not determine coverage percentage, using default value"
              coverage="0.0"
            fi
            
            # Determine badge color based on coverage
            if (( $(echo "$coverage < 50" | bc -l) )); then
              color="red"
            elif (( $(echo "$coverage < 70" | bc -l) )); then
              color="yellow"
            elif (( $(echo "$coverage < 90" | bc -l) )); then
              color="green"
            else
              color="brightgreen"
            fi
            
            # Create badge URL
            badge_url="https://img.shields.io/badge/coverage-${coverage}%25-${color}"
            echo "Final badge URL for $component: $badge_url"
            
            # Update badge in README
            if grep -q "!\[Coverage\]\[${component}-coverage-badge\]" "$readme_path"; then
              sed -i "s|\\[${component}-coverage-badge\\]:.*|[${component}-coverage-badge]: $badge_url|g" "$readme_path"
              echo "Updated $component badge in $readme_path"
            else
              echo "Could not find badge reference in $readme_path"
            fi
          }
          
          # Update the main README.md
          echo "Updating main README.md"
          update_badge "ps" "README.md"
          update_badge "op" "README.md"
          
          # Update proving-service README if it exists
          if [ -f "proving-service/README.md" ]; then
            echo "Updating proving-service README.md"
            update_badge "ps" "proving-service/README.md"
          fi
          
          # Update offchain-processor README if it exists
          if [ -f "offchain-processor/README.md" ]; then
            echo "Updating offchain-processor README.md"
            update_badge "op" "offchain-processor/README.md"
          fi
      
      # Commit and push changes if badges were updated
      - name: Commit and push badge updates
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add README.md proving-service/README.md offchain-processor/README.md
          git commit -m "Update coverage badges [skip ci]"
          git push 