name: Coverage

on:
  # Run coverage only on main branch pushes or manually
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview
    
    - name: Cache RISC Zero toolchain
      id: cache-risc0
      uses: actions/cache@v3
      with:
        path: ~/.risc0
        key: ${{ runner.os }}-risc0-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install RISC Zero toolchain
      if: steps.cache-risc0.outputs.cache-hit != 'true'
      run: |
          curl -L https://risczero.com/install | bash
          export PATH="$HOME/.risc0/bin:$PATH"
          rzup install
    
    - name: Add RISC Zero to PATH
      run: echo "$HOME/.risc0/bin" >> $GITHUB_PATH
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Install grcov
      run: cargo install grcov
      
    - name: Start PostgreSQL
      run: docker compose -f docker/docker-compose.test.yml up -d postgres
    
    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..30}; do
          if docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres; then
            break
          fi
          sleep 1
        done
    
    - name: Run tests with coverage
      run: |
        mkdir -p .coverage
        CARGO_INCREMENTAL=0 \
        RUSTFLAGS="-C instrument-coverage -C codegen-units=1" \
        LLVM_PROFILE_FILE=".coverage/fossil-%p-%m.profraw" \
        cargo test --workspace
      
    - name: Generate coverage report
      run: |
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o .coverage/lcov.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: .coverage/lcov.info
        fail_ci_if_error: false
        
    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from lcov info
        COVERAGE_PCT=$(grep -m 1 "LF:" .coverage/lcov.info | awk '{print $2}')
        COVERAGE_HIT=$(grep -m 1 "LH:" .coverage/lcov.info | awk '{print $2}')
        
        if [ -n "$COVERAGE_PCT" ] && [ -n "$COVERAGE_HIT" ] && [ "$COVERAGE_PCT" -gt 0 ]; then
          COVERAGE=$(awk "BEGIN { printf \"%.1f\", ($COVERAGE_HIT / $COVERAGE_PCT) * 100 }")
          echo "Coverage percentage: $COVERAGE%"
          
          # Determine badge color based on coverage
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$COVERAGE < 70" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE < 90" | bc -l) )); then
            COLOR="green"
          else
            COLOR="brightgreen"
          fi
          
          # Save badge URL to a file for documentation
          echo "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR" > .coverage/badge_url.txt
          echo "Coverage badge URL saved to .coverage/badge_url.txt"
        else
          echo "Could not determine coverage percentage"
        fi

    - name: Stop PostgreSQL
      if: always()
      run: docker compose -f docker/docker-compose.test.yml down 